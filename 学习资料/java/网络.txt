1、 TCP 的 3 次握手和四次挥手
1)连接的3次握手
注意：只能是客户端主动连接服务端
主机A向主机B发出连接请求数据包：“我想给你发数据，可以吗？”，这是第一次对话；
主机B向主机A发送同意连接和要求同步的数据包：“可以，你什么时候发？”，这是第二次对话；
主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。
Client------->Server ：SYN=1,seq=client_isn
Client<------Server ：SYN=1,seq=server_isn ,  ack=client_isn+1
Client------->Server ：SYN=0,seq=client_isn+1, ack=server_isn+1
首先Client端发送连接请求报文，Server段接受连接后回复ACK报文，并为这次连接分配资源。Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。

2）断开连接的四次握手
注意：中断连接端可以是Client端，也可以是Server端。
Client------->Server  :Client发送FIN报文，请求关闭连接
Client<------Server   :Server发送ACK报文，表示已收到请求，但是要等到Server端所有的报文发送完毕
  Server端数据发送完毕后
Client<------Server   :Server发送FIN报文,告诉Client此时可以关闭连接了
Client------->Server  :Client发送ACK报文，并关闭连接


为什么连接的时候是三次握手，关闭的时候却是四次握手？
答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。
其中ACK报文是用来应答的，SYN报文是用来同步的。
但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。


2、TCP 与 UDP 的区别
TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。
UDP（User Data Protocol，用户数据报协议）它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！
--------------TCP
Socket s = new Socket("192.168.1.2",10005); //客户端
ServerSocket ss = new ServerSocket(10005); //服务端
通过InputStream接收数据，OutputStream发送数据
---------------UDP
1)DatagramPacket
数据包，包含发送的数据、目标地址
DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port)
2）DatagramSocket
此类表示用来发送和接收数据报包的套接字。
DatagramSocket client = new DatagramSocket(); //发送方
DatagramSocket  server = new DatagramSocket(5050); //接收方，在5050端口上监听

3、 HTTP 协议; HTTP1.0 与 2.0 的区别，HTTP 报文结构
http://mt.sohu.com/20160824/n465635124.shtml

-------------HTTP1.0 & Http1.x
Http1.0与Http1.x的主要区别主要体现在：
1）缓存处理，
HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，
HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。
2）带宽优化及网络连接的使用
HTTP1.0中，不支持断点续传功能
HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content）
3）错误通知的管理
HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。
4）Host头处理
HTTP1.0请求消息的URL中没有传递主机名，而是IP
HTTP1.1的请求消息必须设置Host请求头
5）长连接
Http1.0每次请求都要创建连接.
HTTP 1.1支持长连接，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。


HTTP1.0和1.1现存的一些问题
HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。
HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量。

-----------------------SPDY
2012年google提出了SPDY的方案，大家才开始从正面看待和解决老版本HTTP协议本身的问题，
SPDY可以说是综合了HTTPS和HTTP两者有点于一体的传输协议，主要解决：
1、降低延迟
针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。
2、请求优先级（request prioritization）
多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。
3、header压缩。
前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。
基于HTTPS的加密协议传输，提高了传输数据的可靠性。
4、服务端（server push）
由于支持长连接，服务端可以主动将消息推送给Client

----SPDY构成图：
HTTP
SPDY
SSL
TCP
   SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。

----------------------Http2.0
HTTP2.0可以说是SPDY的升级版，但是，HTTP2.0 跟 SPDY 仍有不同的地方，主要是以下两点：
HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS
HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE

HTTP2.0的新特性
1）新的二进制格式（Binary Format）
http1.x诞生的时候是明文协议，其格式由三部分组成：start line（request line或者status line），header，body。
要识别这3部分就要做协议解析，http1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，
要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑http2.0的协议解析决定采用二进制格式，实现方便且健壮。
Http1.x请求报文结构：请求行  请求消息头  请求消息体
Http2.0请求报文结构：Length、Type、Flags、Stream ID、Payload
Length定义了整个frame的开始到结束，type定义frame的类型（一共10种），flags用bit位定义一些重要的参数，stream id用作流控制，剩下的payload就是request的正文了。
2）多路复用（MultiPlexing）
即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。
3）header压缩
HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。
4）服务端推送（server push）


8. HTTP 与 HTTPS 的区别以及如何实现安全性
HTTP
SSL
TCP
Https是Http的安全版，在Http与Tcp之间加入SSL层，HTTPS的安全基础是SSL。HTTPS = HTTP + SSL
主要区别如下：
HTTPS协议需要到ca申请证书，一般免费证书很少，需要交费。
HTTP是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的SSL加密传输协议。
HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
HTTPS的连接很简单，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。

9.网络七层协议
从上到下依次是
7）应用层
比如Http、Ftp、SMTP等
6）表示层
这一层的主要功能是定义数据格式及加密。
5）会话层
它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，在某些情况下，如果表示层收到了所有的数据，则用数据代表表示层。示例：RPC，SQL等。
4）传输层
TCP，UDP
3）网络层
这层对端到端的包传输进行定义，它定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。示例：IP，IPX等。
2）数据链路层
它定义了在单个链路上如何传输数据。这些协议与被讨论的各种介质有关。示例：ATM，FDDI等。
1）物理层
连接头、帧、帧的使用、电流、编码及光调制等都属于各种物理层规范中的内容


---------------------------Http状态码
一、成功（2字头）
这一类型的状态码，代表请求已成功被服务器接收、理解、并接受
206：服务器已经成功处理了部分 GET 请求，一般用于断点下载
请求必须包含 Range 头信息来指示客户端希望得到的内容范围
响应必须包含Content-Range
二、重定向（3字头）
这类状态码代表需要客户端采取进一步的操作才能完成请求。
响应消息头中的Location 表示重定向地址
301 Moved Permanently: 被请求的资源已永久移动到新位置
302 Move temporarily：请求的资源临时从不同的 URI响应请求
304 Not Modified ：如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。
305 Use Proxy：被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。
三、请求错误（4字开头）
400 Bad Request
1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。
2、请求参数有误。
401 Unauthorized
当前请求需要用户验证。响应消息头 WWW-Authenticate用以询问用户信息，客户端提交一个包含Authorization 头信息的请求
403 Forbidden
服务器已经理解请求，但是拒绝执行它。
404 Not Found
请求所希望得到的资源未被在服务器上发现。
405 Method Not Allowed
请求行中指定的请求方法不能被用于请求相应的资源。比如必须Post请求的资源，如果使用Get请求就会返回405
406 Not Acceptable
请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。
407 Proxy Authentication Required
与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。
408 Request Timeout
请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。

四、服务器错误（5、6字头）
500 Internal Server Error
服务器内部错误，比如代码发生异常
502 Bad Gateway
服务器无响应
503 Service Unavailable
由于临时的服务器维护或者过载，服务器当前无法处理请求。


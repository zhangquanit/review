

深拷贝和浅拷贝的区别？
1、浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。
浅克隆不会克隆原对象中的引用类型，仅仅拷贝了引用类型的指向。
换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。
2、深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。
换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。


public class CloneTest {

    public static void main(String[] args) throws CloneNotSupportedException {

        CloneObj cloneObj = CloneObj.newObj();
        System.out.println("old=" + cloneObj);

        CloneObj newObj = (CloneObj) cloneObj.clone();
        System.out.println("new=" + newObj);
        System.out.println(newObj.bean.str);
        System.out.println(newObj.bean2.str);

    }

    /**
     * 浅克隆
     */
    public static class CloneObj implements Cloneable {
        public String username;
        public String pwd;
        public MyBean bean; //浅拷贝 未实现Cloneable
        public MyBean2 bean2;//深拷贝 实现了Cloneable


        public static CloneObj newObj() {
            CloneObj cloneObj = new CloneObj();
            cloneObj.username = "张三";
            cloneObj.pwd = "111";
            //浅拷贝
            MyBean myBean = new MyBean();
            myBean.str = "浅拷贝";
            cloneObj.bean = myBean;
            //深拷贝
            MyBean2 myBean2 = new MyBean2();
            myBean2.str = "深拷贝";
            cloneObj.bean2 = myBean2;
            return cloneObj;
        }

        @Override
        protected Object clone() throws CloneNotSupportedException {
            CloneObj cloneObj = (CloneObj) super.clone();
            cloneObj.bean2 = (MyBean2) bean2.clone();//深拷贝  必须调用clone  否则就是浅拷贝
            return cloneObj;
        }

        @Override
        public String toString() {
            return "CloneObj{" +
                    "username='" + username + '\'' +
                    ", pwd='" + pwd + '\'' +
                    ", bean=" + bean +
                    ", bean2=" + bean2 +
                    '}';
        }
    }

    private static class MyBean {
        public String str;

    }

    private static class MyBean2 implements Cloneable {
        public String str;

        @Override
        protected Object clone() throws CloneNotSupportedException {
            return super.clone();
        }
    }
}
----------------------------ThreadPoolExecutor 线程池
public class ThreadPoolExecutor extends AbstractExecutorService {
//构造函数
public ThreadPoolExecutor(
    int corePoolSize,
    int maximumPoolSize,
    long keepAliveTime,
    TimeUnit unit,
    BlockingQueue<Runnable> workQueue,
    ThreadFactory threadFactory,
    RejectedExecutionHandler handler
    );

}
构造函数中各个参数的含义：
corePoolSize：
核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。
在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，
除非调用了prestartAllCoreThreads()预创建所有核心线程或者prestartCoreThread()预创建一个线程方法，从这2个方法的名字就可以看出，是预创建核心线程的意思，
即在没有任务到来之前就创建corePoolSize个线程或者一个线程。
当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；
maximumPoolSize：
线程池最大线程数，它表示在线程池中最多能创建多少个线程；
keepAliveTime：
表示线程没有任务执行时最多保持多久时间会终止。
默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数<=corePoolSize，
但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数<=corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；
unit：
参数keepAliveTime的时间单位;
workQueue:
一个阻塞队列，用来存储等待执行的任务，这里的阻塞队列有以下几种选择：
    SynchronousQueue; 直接提交。
    ArrayBlockingQueue; 有界队列。
    LinkedBlockingQueue; 无界队列
threadFactory：
线程工厂，主要用来创建线程；如果不指定threadFactory，则默认使用Executors.defaultThreadFactory()；
handler：
表示当拒绝处理任务时的策略，有以下四种取值：
ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。
ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。
ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）
ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务


1.线程池状态
volatile int runState;
static final int RUNNING    = 0;
static final int SHUTDOWN   = 1;
static final int STOP       = 2;
static final int TERMINATED = 3;
runState表示当前线程池的状态，它是一个volatile变量用来保证线程之间的可见性；
下面的几个static final变量表示runState可能的几个取值。
当创建线程池后，初始时，线程池处于RUNNING状态；
如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；
如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；
当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。

ThreadPoolExecutor类中其他的一些比较重要成员变量：
private final BlockingQueue<Runnable> workQueue;              //任务缓存队列，用来存放等待执行的任务
private final ReentrantLock mainLock = new ReentrantLock();   //线程池的主要状态锁，对线程池状态（比如线程池大小
private final HashSet<Worker> workers = new HashSet<Worker>();  //用来存放工作集

private volatile long  keepAliveTime;    //线程存活时间
private volatile boolean allowCoreThreadTimeOut;   //是否允许为核心线程设置存活时间
private volatile int   corePoolSize;     //核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）
private volatile int   maximumPoolSize;   //线程池最大能容忍的线程数
private volatile int   poolSize;       //线程池中当前的线程数

private volatile RejectedExecutionHandler handler; //任务拒绝策略
private volatile ThreadFactory threadFactory;   //线程工厂，用来创建线程
private int largestPoolSize;   //用来记录线程池中曾经出现过的最大线程数
private long completedTaskCount;   //用来记录已经执行完毕的任务个数

重点解释一下corePoolSize、maximumPoolSize、largestPoolSize三个变量。
　　corePoolSize在很多地方被翻译成核心池大小，其实我的理解这个就是线程池的大小。举个简单的例子：
　　假如有一个工厂，工厂里面有10个工人，每个工人同时只能做一件任务。
　　因此只要当10个工人中有工人是空闲的，来了任务就分配给空闲的工人做；
　　当10个工人都有任务在做时，如果还来了任务，就把任务进行排队等待；
　　如果说新任务数目增长的速度远远大于工人做任务的速度，那么此时工厂主管可能会想补救措施，比如重新招4个临时工人进来；
　　然后就将任务也分配给这4个临时工人做；
　　如果说着14个工人做任务的速度还是不够，此时工厂主管可能就要考虑不再接收新的任务或者抛弃前面的一些任务了。
　　当这14个工人当中有人空闲时，而新任务增长的速度又比较缓慢，工厂主管可能就考虑辞掉4个临时工了，只保持原来的10个工人，毕竟请额外的工人是要花钱的。

　　这个例子中的corePoolSize就是10，而maximumPoolSize就是14（10+4）。

　　也就是说corePoolSize就是线程池大小，maximumPoolSize在我看来是线程池的一种补救措施，即任务量突然过大时的一种补救措施。
largestPoolSize只是一个用来起记录作用的变量，用来记录线程池中曾经有过的最大线程数目，跟线程池的容量没有任何关系。

在ThreadPoolExecutor类中，最核心的任务提交方法是execute()方法，虽然通过submit也可以提交任务，
但是实际上submit方法里面最终调用的还是execute()方法，所以我们只需要研究execute()方法的实现原理即可：

public void execute(Runnable command) {
    if (command == null)
        throw new NullPointerException();
    /*
     * 3个步骤:
     * 1. 如果<coreSize，则直接创建一个新的线程去执行任务
     * 2. 如果task成功添加到队列中，我们仍旧需要重新检查，避免线程池shut down后将该task添加到队列中，
     * 3. 如果task不能添加到队列中，试着创建一个新线程，如果失败，则可能由于线程池shut down或者任务饱和了，因此拒绝该task
     */
    int c = ctl.get(); //线程运行状态
    if (workerCountOf(c) < corePoolSize) { //小于corePoolSize 直接start a new thread
        if (addWorker(command, true))
            return;
        c = ctl.get();
    }
    if (isRunning(c) && workQueue.offer(command)) {//线程池处于running状态，并且成功添加到任务队列中
        int recheck = ctl.get(); //再次检查线程池运行状态
        if (!isRunning(recheck) && remove(command)) //线程没有处于running状态，就将该task从任务队列中移除
            reject(command); //拒绝  调用 handler.rejectedExecution(command, this);
        else if (workerCountOf(recheck) == 0)
            addWorker(null, false);//添加
    }else if (!addWorker(command, false))
        reject(command); // 调用 handler.rejectedExecution(command, this);
}


private final class Worker
    extends AbstractQueuedSynchronizer
    implements Runnable
{
    final Thread thread;
    Runnable firstTask;
    volatile long completedTasks;
    Worker(Runnable firstTask) {
        setState(-1); // inhibit interrupts until runWorker
        this.firstTask = firstTask;
        this.thread = getThreadFactory().newThread(this);//创建线程
    }

    public void run() {
        runWorker(this); // 添加到线程集合中后  开启线程thread.start();
    }
}
//添加任务
private boolean addWorker(Runnable firstTask, boolean core) {
  //1、检查任务队列是否为空，线程数是否已达到最大maximumPoolSize，如果是 则直接返回false
  //2、创建Worker线程，并添加到线程集合中，添加成功，则开启该线程
   Worker w = new Worker(firstTask);
   final Thread t = w.thread;
   workers.add(w);
   int s = workers.size();
   if (s > largestPoolSize)largestPoolSize = s;
    workerAdded = true;

   if (workerAdded) {
      t.start(); //线程添加成功，开启线程
      workerStarted = true;
   }
   return workerStarted;
}

//执行任务
final void runWorker(Worker w) {
    Thread wt = Thread.currentThread();
    Runnable task = w.firstTask; //创建线程时 分配的任务
    w.firstTask = null;
    w.unlock(); // allow interrupts
    boolean completedAbruptly = true;
    try {
        while (task != null || (task = getTask()) != null) { //getTask() 从任务队列中获取任务
            try {
                beforeExecute(wt, task); //任务执行前，子类可实现功能
                Throwable thrown = null;
                try {
                    task.run();//执行任务
                } catch (Throwable x) {
                    thrown = x; throw new Error(x);
                } finally { //任务执行后，子类可实现功能
                    afterExecute(task, thrown);
                }
            } finally {
                task = null;
                w.completedTasks++; //任务完成数+1
                w.unlock();
            }
        }
        completedAbruptly = false;
    } finally {
        //当任务队列执行完毕后，决定怎么处理该Worker，是否应该从work队列中移除
        processWorkerExit(w, completedAbruptly);
    }
}

//获取任务
private Runnable getTask() {
    boolean timedOut = false; // Did the last poll() time out?
    for (;;) {
        int c = ctl.get();
        int rs = runStateOf(c);

        // Check if queue empty only if necessary.
        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {
            decrementWorkerCount();
            return null;
        }

        int wc = workerCountOf(c);

        // Are workers subject to culling?
        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;

        if ((wc > maximumPoolSize || (timed && timedOut))
            && (wc > 1 || workQueue.isEmpty())) {
            if (compareAndDecrementWorkerCount(c))
                return null;
            continue;
        }

        try {
            Runnable r = timed ?
                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :
                workQueue.take();
            if (r != null)
                return r;
            timedOut = true;
        } catch (InterruptedException retry) {
            timedOut = false;
        }
    }
}



到这里，应该对任务提交给线程池之后到被执行的整个过程有了一个基本的了解，下面总结一下：
　　1）首先，要清楚corePoolSize和maximumPoolSize的含义；
　　2）其次，要知道Worker是用来起到什么作用的；
　　3）要知道任务提交给线程池之后的处理策略，这里总结一下主要有4点：
如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；
如果当前线程池中的线程数目>=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；
如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；
如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目<=corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。


3.线程池中的线程初始化
默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。
在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：
//初始化一个核心线程
public boolean prestartCoreThread() {
    return workerCountOf(ctl.get()) < corePoolSize &&
        addWorker(null, true); //创建一个线程
}
// 初始化所有核心线程
public int prestartAllCoreThreads() {
    int n = 0;
    while (addWorker(null, true))
        ++n;
    return n;
}

4.任务缓存队列及排队策略
　　在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。
　　workQueue的类型为BlockingQueue<Runnable>，通常可以取下面三种类型：
　　1）ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小；
　　2）LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；
　　3）SynchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。

5.任务拒绝策略
当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：
ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。
ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。
ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）
ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务

6.线程池的关闭
ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()，其中：
shutdown()：线程池处于SHUTDOWN状态，停止接受新的任务，等缓存队列中的任务都执行完后才终止.
shutdownNow()：线程池处于STOP状态，停止接受新的任务，并尝试打断正在执行的任务，清空任务缓存队列，返回尚未执行的任务

7.线程池容量的动态调整
ThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()，
setCorePoolSize：设置核心池大小
setMaximumPoolSize：设置线程池最大能创建的线程数目大小
当上述参数从小变大时，ThreadPoolExecutor进行线程赋值，还可能立即创建新的线程来执行任务。


不过在java doc中，并不提倡我们直接使用ThreadPoolExecutor，而是使用Executors类中提供的几个静态方法来创建线程池：
newFixedThreadPool创建的线程池corePoolSize和maximumPoolSize值是相等的，它使用的LinkedBlockingQueue；
newSingleThreadExecutor将corePoolSize和maximumPoolSize都设置为1，也使用的LinkedBlockingQueue；
newCachedThreadPool将corePoolSize设置为0，将maximumPoolSize设置为Integer.MAX_VALUE，使用的SynchronousQueue，也就是说来了任务首先交给空闲线程去处理(线程执行完了有60s的存活时间)， 如果没有空闲线程，就创建新的线程去处理，不会将任务放到任务队列中

--------测试
public class ThreadPoolExecutorTest {
	 public static void main(String[] args) {
		 /**
		  * 从执行结果可以看出，当线程池中线程的数目大于5时，便将任务放入任务缓存队列里面，
		  * 当任务缓存队列满了之后，便创建新的线程。
		  * 如果上面程序中，将for循环中改成执行20个任务，就会抛出任务拒绝异常了。
		  */
         ThreadPoolExecutor executor = new ThreadPoolExecutor(
        		 5, 10,
        		 200, TimeUnit.MILLISECONDS,
                 new ArrayBlockingQueue<Runnable>(5)
        		 );

          //创建15个任务来执行
         for(int i=0;i<15;i++){
        	 //创建task
             MyTask myTask = new ThreadPoolExecutorTest().new MyTask(i);
             //执行task
             executor.execute(myTask);
             System.out.println("线程池中线程数目："+executor.getPoolSize()+"，队列中等待执行的任务数目："+
             executor.getQueue().size()+"，已执行玩别的任务数目："+executor.getCompletedTaskCount());
         }
         executor.shutdown();
     }
	 class MyTask implements Runnable {
		    private int taskNum;

		    public MyTask(int num) {
		        this.taskNum = num;
		    }

		    @Override
		    public void run() {
		        System.out.println("正在执行task "+taskNum);
		        try {
		            Thread.currentThread().sleep(4000);
		        } catch (InterruptedException e) {
		            e.printStackTrace();
		        }
		        System.out.println("task "+taskNum+"执行完毕");
		    }
		}
}
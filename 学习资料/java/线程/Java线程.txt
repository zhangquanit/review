
一、volatile关键字
（1）修改volatile变量时会强制将修改后的值刷新的主内存中。
当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。
而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。

（2）防止CPU指令重排序

二、并发编程中的三个概念：
1、可见性
是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果，另一个线程马上就能看到。

当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，其他线程因此能够读取到最新修改的值。
而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。

对于可见性，Java提供了volatile关键字来保证可见性。
另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，
并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。

2、原子性
即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。
比如 a=0； 这个操作是不可分割的，那么我们说这个操作时原子操作。

再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。
一个操作是原子操作，那么我们称它具有原子性。

public class Counter {
    public volatile static int count = 0;
    public static void inc() {

        //这里延迟1毫秒，使得结果明显
        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
        }
        count++;
    }

    public static void main(String[] args) {

        //同时启动1000个线程，去进行i++计算，看看实际结果

        for (int i = 0; i < 1000; i++) {

            new Thread(new Runnable() {
                @Override
                public void run() {
                    Counter.inc();
                }
            }).start();
        }

        //这里每次运行的值都有可能不同,可能为1000
        System.out.println("运行结果:Counter.count=" + Counter.count);
    }
}
运行结果:Counter.count=995
实际运算结果每次可能都不一样，本机的结果为：运行结果:Counter.count=995，可以看出，在多线程的环境下，Counter.count并没有期望结果是1000

3、有序性
有序性：即程序执行的顺序按照代码的先后顺序执行。
一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。
int i = 0;
boolean flag = false;
i = 1;                //语句1
flag = true;          //语句2

上面代码中，由于语句1和语句2没有依赖，所以经过指令重排序后，语句1不一定比语句2先执行，但是最终结果是一致的。

//线程1:
context = loadContext();   //语句1
inited = true;             //语句2

//线程2:
while(!inited ){
  sleep()
}
doSomethingwithconfig(context);

上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，
而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，
而此时context并没有被初始化，就会导致程序出错。

从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。

也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。




在java 垃圾回收整理一文中，描述了jvm运行时刻内存的分配。其中有一个内存区域是jvm虚拟机栈，每一个线程运行时都有一个线程栈，
线程栈保存了线程运行时候变量值信息。当线程访问某一个对象的时候，首先通过对象的引用找到对应在堆内存的变量的值，然后把堆内存
变量的具体值load到线程本地内存中，建立一个变量副本，之后线程就不再和对象在堆内存变量值有任何关系，而是直接修改副本变量的值，
在修改完之后的某一个时刻（线程退出之前），自动把线程变量副本的值回写到对象在堆中变量。这样在堆中的对象的值就产生变化了。

read and load 从主存复制变量到当前工作内存
use and assign  执行代码，改变共享变量值
store and write 用工作内存数据刷新主存相关内容

其中use and assign 可以多次出现
但是这一些操作并不是原子性，也就是 在read load之后，如果主内存count变量发生修改之后，线程工作内存中的值由于已经加载，不会产生对应的变化，所以计算出来的结果会和预期不一样
对于volatile修饰的变量，jvm虚拟机只是保证从主内存加载到线程工作内存的值是最新的

例如假如线程1，线程2 在进行read,load 操作中，发现主内存中count的值都是5，那么都会加载这个最新的值
在线程1堆count进行修改之后，会write到主内存中，主内存中的count变量就会变为6
线程2由于已经进行read,load操作，在进行运算之后，也会更新主内存count的变量值为6
导致两个线程及时用volatile关键字修改之后，还是会存在并发的情况。

二、线程简单使用
线程（Thread）是一份独立运行的程序，有自己专用的运行栈。线程有可能和其他线程共享一些资源，比如，内存，文件，数据库等。

1、线程的生命周期
生命周期的五种状态：
1）新建（new Thread）
当用new操作符创建一个新的线程对象时，该线程处于创建状态。
处于创建状态的线程只是一个空的线程对象，系统不为它分配资源。
例如：Thread  t1=new Thread();
2）就绪（runnable）
调用start()后，线程就进入就绪状态，也就是说此时线程正在就绪队列中排队等候得到CPU资源。
3）运行（running）
线程获得CPU资源正在执行任务（run()方法）
4）堵塞（blocked）
由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。被阻塞的线程需要再次获得CPU资源后才能进入运行状态。
5）死亡
当线程执行完毕(run()执行完毕)或被其它线程杀死，线程就进入死亡状态

----------线程的两种简单实现方式
1、继承Thread，覆写run方法
2、实现Runnable，并通过Thread的构造函数传入
线程的开启必须调用start()，重复调用start会抛出异常java.lang.IllegalThreadStateException
public class Thread implements Runnable {
 private Runnable target;
 private ClassLoader contextClassLoader; //加载当前线程的ClassLoader
 ThreadLocal.ThreadLocalMap threadLocals = null; //线程范围内共享变量 的map
 private boolean daemon = false; //后台线程
 public Thread(Runnable target) {
        Thread parent = currentThread();
        this.contextClassLoader = parent.contextClassLoader; //创建当前线程所在的线程中的ClassLoader, 第一个线程肯定是main主线程
        this.target = target;
    }
 @Override
 public void run() {
    if (target != null) { //调用thread.start后 进入run方法，检查是否有Runnable
        target.run();
   }
  }
 public ClassLoader getContextClassLoader() {
    return contextClassLoader;
 }
}

----------传统线程的通讯
在synchronized方法中使用同一个锁对象的wait和notify
	public class Business{
		public int num;
		private final Object lock=new Object();
		public void add(){
			synchronized (lock) {
				num+=1;
				if(num==1){
//					notify(); //抛出异常，因为锁对象不是this
					lock.notify();
				}
			}
		}
		public void descrease(){
			synchronized (lock) {
				if(num==0){
					try {
//						wait(); //抛出异常，因为锁对象不是this
						lock.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				--num;
			}
		}
	}

----------定时器
Timer+TimerTask
1）一个TimerTask只能被定时操作一次  即如果被Schedule后  就不能再被Schedule，否则会报异常
Exception in thread "main" java.lang.IllegalStateException: Task already scheduled or cancelled
2）Timer调用cancel()后就不能再执行任何TimerTask了
3）源码解析
public class Timer {
 private final TaskQueue queue = new TaskQueue(); //TimerTask队列
 private final TimerThread thread = new TimerThread(queue); //Timer线程，用来执行TimerTask任务
 public Timer(String name) {
    thread.setName(name);
    thread.start(); //开启线程
  }
  //添加定时任务
  private void schedle(TimerTask task, long time, long period) {

          synchronized(queue) {
              // Timer调用cancel后就不能再执行任何定时任务了
              if (!thread.newTasksMayBeScheduled)
                  throw new IllegalStateException("Timer already cancelled.");

              synchronized(task.lock) {
                 //检查该TimerTask是否已经执行过
                  if (task.state != TimerTask.VIRGIN)
                      throw new IllegalStateException(
                          "Task already scheduled or cancelled");

                  task.nextExecutionTime = time;
                  task.period = period;
                  task.state = TimerTask.SCHEDULED;
              }
              //添加到TimerTask队列中
              queue.add(task);
              if (queue.getMin() == task)
                  queue.notify();
          }
      }

   public void cancel() {
          synchronized(queue) {
              thread.newTasksMayBeScheduled = false;
              queue.clear();
              queue.notify(); //如果队列为空会处于阻塞状态，则唤醒
          }
    }
}
class TimerThread extends Thread {
    private TaskQueue queue;
    TimerThread(TaskQueue queue) {
        this.queue = queue;
    }
    public void run() {
           mainLoop(); //循环执行任务
    }
    private void mainLoop() {
            while (true) {
               synchronized(queue) {
                  // 如果队列中的任务为空 则阻塞
                  while (queue.isEmpty() && newTasksMayBeScheduled)
                      queue.wait(); //等待
                  if (queue.isEmpty())
                      break;
                }
            }
    }
}


----------多线程共享对象和数据的方式
1、同一个Runnable，不同Thread
Business business=new Business();
Runnable task=new Runnable(){
    business.fun();
}
new Thread(task).start();
new Thread(task).start();
2、不同的匿名Runnable操作同一个对象，其实原理同1
Business business=new Business();
new Thread(new Runnable(){
   business.fun();
}).start();
new Thread(new Runnable(){
   business.fun();
}).start();

3、不同的Runnable对象  共享数据或变量作为参数传入到不同的Runnable对象中
  static class MyRunnable implements Runnable{
		private Business business;
		public MyRunnable(Business business){
			this.business=business;
		}
		@Override
		public void run() {
              business.fun();
		}
	}
  static class MyRunnable2 implements Runnable{
	    private Business business;
        public MyRunnable(Business business){
            this.business=business;
        }
        @Override
        public void run() {
              business.fun();
        }
	}
	// 测试
  Business business =new Business();
  MyRunnable runnable = new MyRunnable(business);
  MyRunnable2 runnable2 = new MyRunnable2(business);
  new Thread(runnable).start();
  new Thread(runnable2).start();



三、线程的同步
1、为什么要线程同步？
当多个线程同时读写同一份共享资源的时候，可能会引起冲突。这时候，我们需要引入线程“同步”机制，即各位线程之间要有个先来后到
线程同步的真实意思，其实是“排队”：几个线程之间要排队，一个一个对共享资源进行操作，而不是同时进行操作。
关于线程同步，需要牢牢记住以下几点：
1、线程同步就是线程排队。同步就是排队。线程同步的目的就是避免线程“同步”执行
2、只有共享资源的读写访问才需要同步。如果不是共享资源，那么就根本没有同步的必要。
3，只有“变量”才需要同步访问。如果共享的资源是固定不变的，那么就相当于“常量”，线程同时读取常量也不需要同步。至少一个线程修改共享资源，这样的情况下，线程之间就需要同步。

2、如何实现线程同步
线程同步的基本实现思路还是比较容易理解的。我们可以给共享资源加一把锁，这把锁只有一把钥匙。哪个线程获取了这把钥匙，才有权利访问该共享资源。

同步锁 应该加在哪里？
很多人会说加在共享资源上，但是，大部分情况下，我们在代码中访问的共享资源都是比较简单的共享对象。这些对象里面没有地方让我们加锁。
现代的编程语言的设计思路都是把同步锁加在代码段上。确切的说，是把同步锁加在“访问共享资源的代码段”上。这一点一定要记住，同步锁是加在代码段上的。
访问同一份共享资源的不同代码段，应该加上同一个同步锁；如果加的是不同的同步锁，那么根本就起不到同步的作用，没有任何意义。
这就是说，同步锁本身也一定是多个线程之间的共享对象。

用synchronized关键字给代码段加锁
synchronized(同步锁) {
// 访问共享资源，需要同步的代码段
}
这里尤其要注意的就是，同步锁本身一定要是共享的对象。
public void  f1() {
    Object lock1 = new Object(); // 在方法内部产生一个同步锁
    synchronized(lock1){
    // 代码段 A
    // 访问共享资源 resource1
    // 需要同步
   }
}

上面这段代码没有任何意义。因为那个同步锁是在函数体内部产生的。每个线程调用这段代码的时候，都会产生一个新的同步锁。
那么多个线程之间，使用的是不同的同步锁。根本达不到同步的目的。
同步代码一定要写成如下的形式，才有意义。
public static final Object lock1 = new Object();
… f1() {
synchronized(lock1){ // lock1 是公用同步锁
    // 代码段 A
    // 访问共享资源 resource1
    // 需要同步
}
你不一定要把同步锁声明为static或者public，但是你一定要保证相关的同步代码之间，一定要使用同一个同步锁。

这个同步锁到底是个什么东西。为什么随便声明一个Object对象，就可以作为同步锁？
在Java里面，同步锁的概念就是这样的。任何一个Object Reference都可以作为同步锁。
我们可以把Object Reference理解为对象在内存分配系统中的内存地址。因此，要保证同步代码段之间使用的是同一个同步锁，我们就要保证这些同步代码段的synchronized关键字使用的是同一个Object Reference，同一个内存地址。
Java虚拟机规范中有对synchronized关键字的详细解释。synchronized会编译成 monitor enter, … monitor exit之类的指令对。
Monitor就是实际上的同步锁。每一个Object Reference在概念上都对应一个monitor。
public static final Object lock1 = new Object();
    … f1() {
        synchronized(lock1){ // lock1 是公用同步锁
        // 代码段 A
        // 访问共享资源 resource1
        // 需要同步
        }
    }
    … f2() {
        synchronized(lock1){ // lock1 是公用同步锁
        // 代码段 B
        // 访问共享资源 resource1
        // 需要同步
        }
     }
}
上述的代码中，代码段A和代码段B就是同步的。因为它们使用的是同一个同步锁lock1。
如果有10个线程同时执行代码段A，同时还有20个线程同时执行代码段B，那么这30个线程之间都是要进行同步的。
这30个线程都要竞争一个同步锁lock1。同一时刻，只有一个线程能够获得lock1的所有权，只有一个线程可以执行代码段A或者代码段B。
其他竞争失败的线程只能暂停运行，进入到该同步锁的就绪（Ready）队列。
成功获取同步锁的线程，执行完同步代码段之后，会释放同步锁。
该同步锁的就绪队列中的其他线程就继续下一轮同步锁的竞争。成功者就可以继续运行，失败者还是要乖乖地待在就绪队列中。
线程同步是非常耗费资源的一种操作。我们要尽量控制线程同步的代码段范围。同步的代码段范围越小越好

synchronized关键字直接加在函数的定义上，同步锁就是当前对象，等价于
synchronized(this){

}
如果加在静态方法上，同步锁就是类本身，等价于
synchronized(Class){

}

-------------java中封装的锁对象
ReentrantLock
class X {
   private final ReentrantLock lock = new ReentrantLock();
   public void m() {
     lock.lock();  // block until condition holds
     try {
       // ... method body
     } finally {
       lock.unlock()
     }
   }
 }
ReentrantLock对比synchronized：
1、synchronized是独占锁，加锁和解锁的过程自动进行，易于操作，但不够灵活。
ReentrantLock也是独占锁，加锁和解锁的过程需要手动进行，不易操作，但非常灵活。
2、synchronized可重入，因为加锁和解锁自动进行，不必担心最后是否释放锁；
ReentrantLock也可重入，但加锁和解锁需要手动进行，且次数需一样，否则其他线程无法获得锁。
3、synchronized不可响应中断，一个线程获取不到锁就一直等着；ReentrantLock可以相应中断。
    ReentrantLock lock1 = new ReentrantLock();
    ReentrantLock lock2 = new ReentrantLock();
    new Thread(new MyRunnable(lock1,lock2),"线程1").start();
    new Thread(new MyRunnable(lock1,lock2),"线程2").start();
    private static class MyRunnable implements Runnable {
        ReentrantLock lock1, lock2;
        public MyRunnable(ReentrantLock lock1, ReentrantLock lock2) {
            this.lock1 = lock1;
            this.lock2 = lock2;
        }

        @Override
        public void run() {
            try {
                lock1.lockInterruptibly();
                Thread.sleep(1000);
                lock2.lockInterruptibly();

            } catch (Exception e) {

            } finally {
                lock1.unlock();
                lock2.unlock();
                System.out.println(Thread.currentThread().getName()+"结束");
            }
        }
    }
----------------
线程1结束
线程2结束

ReentrantLock好像比synchronized关键字没好太多，我们再去看看synchronized所没有的，
ReentrantLock lock = new ReentrantLock(true) //true 公平锁
一个最主要的就是ReentrantLock还可以实现公平锁机制。什么叫公平锁呢？也就是在锁上等待时间最长的线程将获得锁的使用权。
通俗的理解就是谁排队时间最长谁先执行获取锁。


ReentrantReadWriteLock



死锁产生的原因

------------------------------------Java5 并发库----------------------------------------
-------------------ThreadLocal
ThreadLocal用于保存某个线程共享变量，只能在当前线程内使用。
1）ThreadLocal代表一个变量  只能保存一个数据,如果有一百个变量要共享,则应先定义一个对象来封装这一百个变量
然后在ThreadLocal中储存这个对象。
比如同时需要设置username和password为线程范围的共享变量，则需要创建两个ThreadLocal
ThreadLocal<String> username=new ThreadLocal();
ThreadLocal<String> password=new ThreadLocal();
如果还有其他的呢，100个？
因此，可以创建一个对象来保存这些变量，然后将这个变量放到ThreadLocal中
public class ValueObject{
public String username;
public String password;
...................
}
ThreadLocal<ValueObject>  localValues=new ThreadLocal();

2）实现思路：以Thread为key，变量为value
3）ThreadLocal源码解析：
内部封装了一个Map,key为当前线程,  value为共享的变量  存放的是一条线程内的共享变量
public class ThreadLocal<T> {
    //保存
    public void set(T value) {
        Thread t = Thread.currentThread(); //当前线程
        ThreadLocalMap map =t.threadLocals;
        if (map != null)
            map.set(this, value); //以当前线程为key，变量为value
        else
           t.threadLocals = new ThreadLocalMap(this, value); //创建map
    }
    //获取
    public T get() {
        Thread t = Thread.currentThread(); //当前线程
        ThreadLocalMap map = t.threadLocals;
        if (map != null) {
            ThreadLocalMap.Entry e = map.getEntry(this);//获取当前线程保存的value
            if (e != null) {
                T result = (T)e.value;
                return result;
            }
        }else{
           t.threadLocals = new ThreadLocalMap(this, null); //创建map
        }

        return null;
    }

}

-------------------java.util.concurrent.atomic中实现的原子操作类包括：
AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference。
基本工作原理是使用了同步synchronized的方法实现了对一个long, integer, 对象的增、减、赋值（更新）操作.
java多线程用法-使用AtomicInteger
class Counter {
    private volatile int count = 0;
    public synchronized void increment() {
       count++;  //若要线程安全执行执行count++，需要加锁
    }

    public int getCount() {
       return count;
    }
 }

class Counter {
    private AtomicInteger count = new AtomicInteger();
    public void increment() {
       count.incrementAndGet(); //使用AtomicInteger之后，不需要加锁，也可以实现线程安全。
    }
    public int getCount() {
        return count.get();
    }
}

-------------------线程池
一、体系架构
 (I)Executor
    ---(I)ExecutorService
        ---(I)ScheduledExecutorService
        ---(C)AbstractExecutorService
               ---C)DelegatedExecutorService
                     ---C)DelegatedScheduledExecutorService（实现ScheduledExecutorService）
               ---C)ThreadPoolExecutor
                     ---C)ScheduledThreadPoolExecutor（实现ScheduledExecutorService）


public interface Executor {
    void execute(Runnable command);
}
public interface ExecutorService extends Executor {
    void shutdown();
    List<Runnable> shutdownNow();
    boolean isShutdown();
    boolean isTerminated();
    boolean awaitTermination(long timeout, TimeUnit unit)
        throws InterruptedException;
    <T> Future<T> submit(Callable<T> task);
    <T> Future<T> submit(Runnable task, T result);
    Future<?> submit(Runnable task);
    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
        throws InterruptedException;
    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,
                                  long timeout, TimeUnit unit)
        throws InterruptedException;
    <T> T invokeAny(Collection<? extends Callable<T>> tasks)
        throws InterruptedException, ExecutionException;
    <T> T invokeAny(Collection<? extends Callable<T>> tasks,
                    long timeout, TimeUnit unit)
        throws InterruptedException, ExecutionException, TimeoutException;
}

//定时器功能
public interface ScheduledExecutorService extends ExecutorService {
    public ScheduledFuture<?> schedule(Runnable command,
                                       long delay, TimeUnit unit);
    public <V> ScheduledFuture<V> schedule(Callable<V> callable,
                                           long delay, TimeUnit unit);

    public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
                                                  long initialDelay,
                                                  long period,
                                                  TimeUnit unit);
    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,
                                                     long initialDelay,
                                                     long delay,
                                                     TimeUnit unit);
}

public abstract class AbstractExecutorService implements ExecutorService {

}

public class ThreadPoolExecutor extends AbstractExecutorService {

}

//定时器线程池
public class ScheduledThreadPoolExecutor
        extends ThreadPoolExecutor
        implements ScheduledExecutorService {

}
//代理ExecutorService功能
static class DelegatedExecutorService extends AbstractExecutorService {
    private final ExecutorService e;
    DelegatedExecutorService(ExecutorService executor) { e = executor; }
    public void execute(Runnable command) { e.execute(command); }
}
//代理ScheduledExecutorService功能
static class DelegatedScheduledExecutorService
        extends DelegatedExecutorService
        implements ScheduledExecutorService {
    private final ScheduledExecutorService e;
    DelegatedScheduledExecutorService(ScheduledExecutorService executor) {
        super(executor);
        e = executor;
    }
    public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {
        return e.schedule(command, delay, unit);
    }
 }

-------------------CompletionService&ExecutorCompletionService

public interface CompletionService<V> {
    Future<V> submit(Callable<V> task);
    Future<V> submit(Runnable task, V result);
    Future<V> take() throws InterruptedException;
    Future<V> poll();
    Future<V> poll(long timeout, TimeUnit unit) throws InterruptedException;
}
public class ExecutorCompletionService<V> implements CompletionService<V>{
    private final Executor executor;
    private final AbstractExecutorService aes;
    private final BlockingQueue<Future<V>> completionQueue;
    private class QueueingFuture extends FutureTask<Void> {
        QueueingFuture(RunnableFuture<V> task) {
            super(task, null);
            this.task = task;
        }
        protected void done() { completionQueue.add(task); }
        private final Future<V> task;
    }

    private RunnableFuture<V> newTaskFor(Callable<V> task) {
        if (aes == null)
            return new FutureTask<V>(task);
        else
            return aes.newTaskFor(task);
    }

    private RunnableFuture<V> newTaskFor(Runnable task, V result) {
        if (aes == null)
            return new FutureTask<V>(task, result);
        else
            return aes.newTaskFor(task, result);
    }
    public ExecutorCompletionService(Executor executor) {
        if (executor == null)
            throw new NullPointerException();
        this.executor = executor;
        this.aes = (executor instanceof AbstractExecutorService) ?
            (AbstractExecutorService) executor : null;
        this.completionQueue = new LinkedBlockingQueue<Future<V>>();
    }
    public ExecutorCompletionService(Executor executor,
                                     BlockingQueue<Future<V>> completionQueue) {
        if (executor == null || completionQueue == null)
            throw new NullPointerException();
        this.executor = executor;
        this.aes = (executor instanceof AbstractExecutorService) ?
            (AbstractExecutorService) executor : null;
        this.completionQueue = completionQueue;
    }

    public Future<V> submit(Callable<V> task) {
        if (task == null) throw new NullPointerException();
        RunnableFuture<V> f = newTaskFor(task);
        executor.execute(new QueueingFuture(f));
        return f;
    }

    public Future<V> submit(Runnable task, V result) {
        if (task == null) throw new NullPointerException();
        RunnableFuture<V> f = newTaskFor(task, result);
        executor.execute(new QueueingFuture(f));
        return f;
    }

    public Future<V> take() throws InterruptedException {
        return completionQueue.take();
    }

    public Future<V> poll() {
        return completionQueue.poll();
    }

    public Future<V> poll(long timeout, TimeUnit unit)
            throws InterruptedException {
        return completionQueue.poll(timeout, unit);
    }
}

-------------------ThreadFactory
public interface ThreadFactory {
    /**
      构建一个新线程，可指定线程的priority、name、daemon、ThreadGroup等
     */
    Thread newThread(Runnable r);
}
创建线程的工厂，就无需再手工编写对 new Thread 的调用
此接口最简单的实现就是：
class SimpleThreadFactory implements ThreadFactory {
   public Thread newThread(Runnable r) {
     return new Thread(r);
   }
}
可使用Executors.defaultThreadFactory()获得ThreadFactory
static class DefaultThreadFactory implements ThreadFactory {
    private static final AtomicInteger poolNumber = new AtomicInteger(1);//线程池的number
    private final ThreadGroup group;
    private final AtomicInteger threadNumber = new AtomicInteger(1); //线程的number
    private final String namePrefix; //线程名的前缀

    DefaultThreadFactory() {
        SecurityManager s = System.getSecurityManager();
        group = (s != null) ? s.getThreadGroup() :
                              Thread.currentThread().getThreadGroup();
        namePrefix = "pool-" +
                      poolNumber.getAndIncrement() +
                     "-thread-";
    }

    public Thread newThread(Runnable r) {
        Thread t = new Thread(group, r,
                              namePrefix + threadNumber.getAndIncrement(),
                              0);
        if (t.isDaemon())
            t.setDaemon(false);
        if (t.getPriority() != Thread.NORM_PRIORITY)
            t.setPriority(Thread.NORM_PRIORITY);
        return t;
    }
}
-------------------Executors
用于创建ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 类的工厂

//创建一个固定大小的线程池
Executors.newFixedThreadPool(3);	//包含3条线程
//缓存线程池  线程执行完毕后，默认有60s的存活时间，如果此时有新任务到来，则首先由空闲线程去处理任务，如果当前任务过多处理不过来，就创建新的线程去处理
Executors.newCachedThreadPool();
//创建单一线程池 线程死了马上又会创建  始终保持拥有一个线程
Executors.newSingleThreadExecutor();
//用线程池启动定时器
Executors.newScheduledThreadPool(3)
//创建默认的ThreadFactory
ThreadFactory defaultThreadFactory();

--------------------Semaphore  ['seməfɔː]
一个计数信号量。从概念上讲，信号量维护了一个许可集。在获得许可之前，它将阻塞
作用：通常用于限制可以访问某些资源（物理或逻辑的）的线程数目。
Semaphore(int permits)
          创建具有给定的许可数和非公平设置的 Semaphore。 只要有空余许可  线程都可随即获取
Semaphore(int permits, boolean fair)
          创建具有给定的许可数和给定的公平设置的 Semaphore。线程只能按顺序获取许可


重要方法：
acquire();//获得许可  在获得许可前处于阻塞状态
release(); //释放许可  将该许可归还给信号量
availablePermits()：可用的许可数量

    Semaphore semaphore=new Semaphore(2);
    //模拟进入停车场
    for(int i=0;i<5;i++){
        Thread thread=new Thread(new Runnable() {
            public void run() {
                try {
                    System.out.println("===="+Thread.currentThread().getName()+"来到停车场");
                    if(semaphore.availablePermits()==0){
                        System.out.println("车位不足，请耐心等待");
                    }
                    semaphore.acquire();//获取令牌尝试进入停车场
                    System.out.println(Thread.currentThread().getName()+"成功进入停车场");
                    Thread.sleep(new Random().nextInt(10000));//模拟车辆在停车场停留的时间
                    System.out.println(Thread.currentThread().getName()+"驶出停车场");
                    semaphore.release();//释放令牌，腾出停车场车位
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        },i+"号车");

        thread.start();
    }
---------------------CyclicBarrier  ['saɪklɪk']['bærɪə]
 一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。
在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用
，所以称它为循环 的 barrier。
CyclicBarrier cb = new CyclicBarrier(3);//指定3个线程到达集合点后才能继续执行
getNumberWaiting() ：返回当前在屏障处等待的参与者数目。

ExecutorService service = Executors.newCachedThreadPool();
final  CyclicBarrier cb = new CyclicBarrier(3);//指定3个线程到达集合点后才能继续执行
for(int i=0;i<3;i++){
    Runnable runnable = new Runnable(){
            public void run(){
            try {
                Thread.sleep((long)(Math.random()*10000));
                System.out.println("线程" + Thread.currentThread().getName() +
                        "即将到达集合地点1，当前已有" + (cb.getNumberWaiting()+1) + "个已经到达，" + (cb.getNumberWaiting()==2?"都到齐了，继续走啊":"正在等候"));
                cb.await(); //等待  直到3条线程都到达了 才能继续向下执行

                Thread.sleep((long)(Math.random()*10000));
                System.out.println("线程" + Thread.currentThread().getName() +
                        "即将到达集合地点2，当前已有" + (cb.getNumberWaiting()+1) + "个已经到达，" + (cb.getNumberWaiting()==2?"都到齐了，继续走啊":"正在等候"));
                cb.await();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };
    service.execute(runnable);
}

----------------------CountDownLatch  [lætʃ]
 计数器，在当前计数到达零之前，await 方法会一直受阻塞。

CountDownLatch(int count) 构造一个用给定计数初始化的 CountDownLatch。
countDown() 将计数减1  计数到达0时 释放所有等待的线程
getCount()  返回当前计数。
await()     使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。
await(long timeout, TimeUnit unit)
                   使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。

    CountDownLatch countDownLatch = new CountDownLatch(3);
    //模拟进入停车场
    for(int i=0;i<3;i++){
        Thread thread=new Thread(new Runnable() {
            public void run() {
                try {
                    System.out.println(Thread.currentThread().getName()+"成功进入停车场");
                    Thread.sleep(new Random().nextInt(10000));//模拟车辆在停车场停留的时间
                    System.out.println(Thread.currentThread().getName()+"驶出停车场");
                    countDownLatch.countDown();//释放令牌，腾出停车场车位
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        },i+"号车");

        thread.start();
    }

    try {
        countDownLatch.await(); //只有计数器为0后 才能继续向下执行
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    System.out.println("所有任务执行完毕  继续往下执行");

CyclicBarrier和CountDownLatch区别？
这两个类非常类似，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：
CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行
CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务
CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了


----------------------FutureTask
public interface RunnableFuture<V> extends Runnable, Future<V>
public class FutureTask<V> implements RunnableFuture<V> {
 public FutureTask(Callable<V> callable)
 public FutureTask(Runnable runnable, V result)

 public void run() {
          Callable<V> c = callable;
          result = c.call(); //调用Callable的call()
      }
}
FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，
可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。
当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中
FutureTask futureTask = new FutureTask(new Callable<String>() {
    @Override
    public String call() throws Exception {
        System.out.println("----call,thread="+Thread.currentThread().getName());
        Thread.sleep(5*1000);

        System.out.println("----call, end");
        return "hello world";
    }
});
new Thread(futureTask).start();
String value = (String)futureTask.get(); //获取callbale返回的数据，没获取到数据前处于等待

----------------------Lock
1、synchronized
强制所有锁获取和释放均要出现在一个块结构{}中：当获取了多个锁时，它们必须以相反的顺序释放，且必须在与所有锁被获取时相同的词法范围内释放所有锁。
synchronized(lock1){
    ......
    synchronized(lock2){

    }
}
比如获取了lock1和lock2两个锁，则必须按相反的顺序释放：先释放lock2 才能释放lock1
synchronized语句块执行完毕后会自动释放同步锁

2、Lock
Lock比传统线程模型中的synchronized方式更加面向对象，锁本身也应该是一个对象。两个线程执行的代码片段要实现同步互斥的效果，它们必须用同一个Lock对象。
 与传统的synchronzed相比 更加面向对象，不需要定义同步块，可随意控制锁的获取和释放，不过要注意锁的释放，比如放在finally{ }语句块中释放锁
 void lock()
          获取锁。
 void lockInterruptibly()
          如果当前线程未被中断，则获取锁。
 Condition newCondition()
          返回绑定到此 Lock 实例的新 Condition 实例。
 boolean tryLock()
          仅在调用时锁为空闲状态才获取该锁。
 boolean tryLock(long time, TimeUnit unit)
          如果锁在给定的等待时间内空闲，并且当前线程未被中断，则获取锁。
 void unlock()
          释放锁。

关于Condition，可用于线程间交互
Condition condition=lock.newCondition();
  condition.await() //让出锁 其他线程可以获得重入锁
  condition.signal() //
一旦线程进入wait状态后，它就不再keep这个锁了，其他线程就可以获得该锁；
当该线程被唤醒（触发信号或者timeout）后，就接着执行，会重新“保持”锁，当然前提依然是其他线程已经不再“保持”了该重入锁。
对于重入锁而言，"lock"和"keep"是两个不同的概念。lock了锁，不一定keep锁，但keep了锁一定已经lock了锁。


--ReentrantLock
重入锁
Lock lock=new ReentrantLock();
public void fun(){
  lock.lock();
  try{
        .....
  }finally{
     lock.unlock();
  }
}

ReentrantLock 将由最近成功获得锁，并且还没有释放该锁的线程所拥有。
当锁没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁并返回。如果当前线程已经拥有该锁，此方法将立即返回。
可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。

Lock lock=new ReentrantLock(true);
此类的构造方法接受一个可选的公平 参数。当设置为 true 时，在多个线程的争用下，这些锁倾向于将访问权授予等待时间最长的线程。

int getHoldCount()
      查询当前线程保持此锁的次数。
protected  Thread getOwner()
      返回目前拥有此锁的线程，如果此锁不被任何线程拥有，则返回 null。
protected  Collection<Thread> getQueuedThreads()
      返回一个 collection，它包含可能正等待获取此锁的线程。
int getQueueLength()
      返回正等待获取此锁的线程估计数。
protected  Collection<Thread> getWaitingThreads(Condition condition)
      返回一个 collection，它包含可能正在等待与此锁相关给定条件的那些线程。
int getWaitQueueLength(Condition condition)
      返回等待与此锁相关的给定条件的线程估计数。
boolean hasQueuedThread(Thread thread)
      查询给定线程是否正在等待获取此锁。
boolean hasQueuedThreads()
      查询是否有些线程正在等待获取此锁。
boolean hasWaiters(Condition condition)
      查询是否有些线程正在等待与此锁有关的给定条件。
boolean isFair()
      如果此锁的公平设置为 true，则返回 true。
boolean isHeldByCurrentThread()
      查询当前线程是否保持此锁。
boolean isLocked()
      查询此锁是否由任意线程保持。

------ReadWriteLock
读写锁：读取操作上读锁，写入操作上写锁
与互斥锁相比，读-写锁允许对共享数据进行更高级别的并发访问。虽然一次只有一个线程（writer 线程）可以修改共享数据，但在许多情况下，任何数量的线程可以同时读取共享数据（reader 线程）
与互斥锁相比，使用读-写锁所允许的并发性增强将带来更大的性能提高
与互斥锁相比，使用读-写锁能否提升性能则取决于读写操作期间 读取数据相对于修改数据的频率，以及数据的争用——即在同一时间试图对该数据执行读取或写入操作的线程数。
特点：
在 writer 释放写入锁时，reader 和 writer 都处于等待状态
在 reader 处于活动状态而 writer 处于等待状态时，确定是否向请求读取锁的 reader 授予读取锁。Reader 优先会无限期地延迟 writer，而 writer 优先会减少可能的并发。

锁降级 :先获取写入锁，然后获取读取锁，最后释放写入锁。但是，从读取锁升级到写入锁是不可能的

rwl.writeLock().lock()；//先获取写入锁
     .......
rwl.readLock().lock(); //降级锁 在释放写锁之前获取读锁
     .......
rwl.writeLock().unlock()；//释放写入锁
     .......
rwl.readLock().unlock(); //释放读取锁

    private static class CachedData {
        String data;
        volatile boolean cacheValid;
        final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();

        void processCachedData() {
            rwl.readLock().lock();
            if (!cacheValid) {
                // 获取写锁之前必须释放读锁  即读锁不能升级为写锁
                rwl.readLock().unlock();
                rwl.writeLock().lock();
                try {
                    //重新检查cacheValid  防止其他线程获取写锁后修改了该值
                    if (!cacheValid) {
                        data = ...; //获取缓存(对象赋值)
                        cacheValid = true;
                    }
                    // 降级锁  在释放写锁之前重新获得读锁
                    rwl.readLock().lock();
                } finally {
                    rwl.writeLock().unlock(); // Unlock write, still hold read
                }
            }

            try {
                useData()
            } finally {
                rwl.readLock().unlock();
            }
        }
    }
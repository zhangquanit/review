
一、JVM Java虚拟机
java虚拟机基于栈，基于栈的机器必须使用指令来载入和操作栈上数据。
java虚拟机运行的是java字节码。

二、Dalvik
它是 Google 专门为 Android 平台开发的虚拟机。基于寄存器
Dalvik运行的是自己专属的.dex字节码格式。(dx工具将class文件转换成dex文件)
一个应用对应一个Diavik虚拟机实例，独立运行。一个apk只包含一个.dex文件（所以存在65536方法限制）。


三、ART
ART（Android Runtime）虚拟机是 Android 4.4 发布的，用来替换 Dalvik 虚拟机，
Android 4.4 默认采用 Dalvik，但是可以选择使用 ART。在 Android 5.0 版本中默认使用 ART，Dalvik 从此退出历史舞台。


1、预先 (AOT) 编译
ART 引入了预先编译机制，可提高应用的性能。ART 还具有比 Dalvik 更严格的安装时验证。
在安装时，ART 使用设备自带的 dex2oat 工具来编译应用。
不过采用 AOT 也有缺点，主要有两个：
第一个是 AOT 会使得应用程序的安装时间变长，尤其是一些复杂的应用；
第二个是字节码预先编译成机器码，机器码需要的存储空间会多一些。
为了弥补以上两个缺点，在Android7.0时，加入了JIT即时编译器，作为AOT的一个补充，
应用程序在安装时，只会将热点代码编译成机器码存在本地，缩短应用程序安装时间节省存储空间。

代码在执行期间，会收集热点代码，热点代码会通过JIT即时编译器编译成对应的文件保存在jit code cache，
在设备空闲时或者充电时，AOT仅仅编译这部分热点代码文件，剩下的非热点代码依然是在运行时编译。



2、垃圾回收方面的优化
垃圾回收 (GC) 会耗费大量资源，导致显示不稳定、界面响应速度缓慢以及其他问题。
ART 通过以下几种方式对垃圾回收做了优化：
1）大多采用并发设计，具有一次 GC 暂停
2）并发复制，可减少后台内存使用和碎片
3）GC 暂停的时间不受堆大小影响
4）在清理最近分配的短时对象这种特殊情况中，回收器的总 GC 时间更短
5）优化了垃圾回收的工效，能够更加及时地进行并行垃圾回收，这使得 GC_FOR_ALLOC 事件在典型用例中极为罕见


ART 的 GC 日志具体格式为：
I/art: <GC_Reason> <GC_Name> <Objects_freed>(<Size_freed>) AllocSpace Objects, <Large_objects_freed>(<Large_object_size_freed>) <Heap_stats> LOS objects, <Pause_time(s)>

3、改进
在 Android 8.0 版本中，Android Runtime (ART) 有了极大改进。
1）并发压缩式垃圾回收器
该回收器会在每次执行 GC 时以及应用正在运行时对堆进行压缩，且仅在处理线程根时短暂停顿一次。
停顿次数不再随堆的大小而变化，应用在使用较大的堆时也无需担心造成卡顿。
2）循环优化
3）其他



四、Dalvik与Art的区别：
1、Dalvik每次都要编译再运行，Art只会首次启动编译
在Dalvik下，应用每次运行的时候，字节码都需要通过即时编译器（just in time ，JIT）转换为机器码，这会拖慢应用的运行效率，
而在ART 环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。这个过程叫做预编译（AOT,Ahead-Of-Time）
。这样的话，应用的启动(首次)和执行都会变得更加快速。

2、Art占用空间比Dalvik大（原生代码占用的存储空间更大），就是用“空间换时间”
3、Art减少编译，减少了CPU使用频率，使用明显改善电池续航
4、Art应用启动更快、运行更快、体验更流畅、触感反馈更及时

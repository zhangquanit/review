

http://www.jianshu.com/p/da2a4bfcba68

一、卡顿的本质：丢帧
Android系统每隔16ms会发出VSYNC信号重绘我们的界面(Activity).
为什么是16ms, 因为Android设定的刷新率是60FPS(Frame Per Second), 也就是每秒60帧的刷新率, 约合16ms刷新一次.
这就意味着, 我们需要在16ms内完成下一次要刷新的界面的相关运算，以便界面刷新更新. 然而, 如果我们无法在16ms内完成此次运算会怎样呢?
丢帧
例如, 假设我们更新屏幕的背景图片, 需要24ms来做这次运算. 当系统在第一个16ms时刷新界面, 然而我们的运算还没有结束,
无法绘出图片. 当系统隔16ms再发一次VSYNC信息重绘界面时, 用户才会看到更新后的图片. 也就是说用户是32ms后看到了这次刷新(注意, 并不是24ms). 这就是传说中的丢帧(dropped frame):
丢帧给用户的感觉就是卡顿, 而且如果运算过于复杂, 丢帧会更多

二、卡顿原因分析及处理
1、过于复杂的布局
界面性能取决于UI渲染性能. 我们可以理解为UI渲染的整个过程是由CPU和GPU两个部分协同完成的.
其中,CPU负责UI布局元素的Measure, Layout, Draw等相关运算执行. GPU负责栅格化(rasterization), 将UI元素绘制到屏幕上.
如果我们的UI布局层次太深, 或是自定义控件的onDraw中有复杂运算, CPU的相关运算就可能大于16ms, 导致卡顿.
这个时候, 我们需要借助Hierarchy Viewer这个工具来帮我们分析布局了. Hierarchy Viewer不仅可以以图形化树状结构的形式展示出UI层级, 还对每个节点给出了三个小圆点, 以指示该元素Measure, Layout, Draw的耗时及性能.
* 绿色, 表示该View的此项性能比该View Tree中超过50%的View都要快.
* 黄色, 表示该View的此项性能比该View Tree中超过50%的View都要慢.
* 红色, 表示该View的此项性能是View Tree中最慢的.

Hierarchy Viewer需要Root的机器(产品机没有开启ViewServer)才可以执行.
可以使用第三方的开源的ViewServer来协助我们在未Root的机器上使用Hierarchy Viewer分析.
参见：performance_strictmodel

2、过度绘制(Overdraw)
理想情况下，每个像素点应该只被绘制一次, 如果有多次绘制, 就是Overdraw, 过度绘制了.
1）调试Overdraw
在"系统设置"-->"开发者选项"-->"调试GPU过度绘制"中开启调试:
原色: 没有overdraw
蓝色: 1次overdraw
绿色: 2次overdraw
粉色: 3次overdraw
红色: 4次及4次以上的overdraw

2）Overdraw的分析处理
绘制了多重背景：
 主题背景
 根布局背景：与主题背景相同的话 就不用再设置，或者设置windowbackground为null
 容器背景：--纯色背景、shape背景(颜色与背景相同)

3、UI线程的复杂运算
UI线程的复杂运算会造成UI无响应, 当然更多的是造成UI响应停滞, 卡顿.
关于运算阻塞导致的卡顿的分析, 可以使用Traceview这个工具.
StrictMode的使用
StrictMode用来基于线程或VM设置一些策略, 一旦检测到策略违例, 控制台将输出一些警告，包含一个trace信息展示你的应用在何处出现问题.
通常用来检测主线程中的磁盘读写或网络访问等耗时操作.

4、频繁的GC
为什么说频繁的GC会导致卡顿呢?
简而言之, 就是执行GC操作的时候，任何线程的任何操作都会需要暂停，等待GC操作完成之后，其他操作才能够继续运行, 如果程序频繁GC, 自然会导致界面卡顿.
注意Dalvik与Art虚拟机的在GC回收方面的区别：
1）Dalvik在GC时会两次暂停用户线程，1次是在扫描标记垃圾对象时，一次是在回收时。
2）Art只会暂停一次用户线程，并且暂停时间更短。

导致频繁GC有两个原因:
内存抖动(Memory Churn), 即大量的对象被创建又在短时间内马上被释放.
瞬间产生大量的对象会严重占用Young Generation的内存区域, 当达到阀值, 剩余空间不够的时候, 也会触发GC. 即使每次分配的对象需要占用很少的内存，但是他们叠加在一起会增加Heap的压力, 从而触发更多的GC.






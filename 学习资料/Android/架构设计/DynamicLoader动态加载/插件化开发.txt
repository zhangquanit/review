

---------------------------------插件化
http://blog.csdn.net/h3c4lenovo/article/details/50751643
https://zhuanlan.zhihu.com/p/21348609?refer=kaede
动态加载APK原理分享
http://blog.csdn.net/hkxxx/article/details/42194387

将一些独立的功能做成一个单独的apk，当打开的时候使用DexClassLoader动态加载，然后使用反射机制来调用插件中的类和方法。
但这种方案存在着以下两个问题：
1. 插件化只适合一些比较独立的模块；
2. 必须通过反射机制去调用插件的类和方法，因此，必须搭配一套插件框架来配合使用；

一、访问插件包中的资源
//1、引入插件的AssetManager
String apkPath="";
AssetManager assetManager = AssetManager.class.newInstance();
AssetManager.class.getDeclaredMethod("addAssetPath", String.class).invoke(
        assetManager, apkPath);
//2、获得插件的Resource
new Resources(assetManager, context.getResources().getDisplayMetrics(), context.getResources().getConfiguration());
//3、通过资源名字/类型/插件包名获取资源
使用resources.getIdentifier(资源名称，资源类型，资源所在的包名)
String str = resources.getString(resources.getIdentifier("app_name", "string", "h3c.plugina"));
Drawable drawable=resources.getDrawable(resources.getIdentifier("ic_launcher", "mipmap", "h3c.plugina"))

二、跳转到插件的Activity方法
1）代理Activity模式
在宿主中创建一个代理Activity，用来代理插件包中Activity的生命周期，
public class BaseActivity extends Activity {
    ....
    // 通过隐式调用宿主的ProxyActivity
    public static final String PROXY_VIEW_ACTION = "h3c.pluginapp.ProxyActivity";
    // 因为插件的Activity没有Context，所以一切与Context的行为都必须通过宿主代理Activity实现！
    protected Activity mProxyActivity;
    public void setProxy(Activity proxyActivity) {
        mProxyActivity = proxyActivity;
    }

    @Override
    public void setContentView(int layoutResID) {
        mProxyActivity.setContentView(layoutResID);
    }

    @Override
    public View findViewById(int id) {
        return mProxyActivity.findViewById(id);
    }

    // 插件的startActivity其实就是调用宿主开启另一个ProxyActivity
    public void startActivity(String className) {
        Intent intent = new Intent(PROXY_VIEW_ACTION);
        intent.putExtra("Class", className);
        mProxyActivity.startActivity(intent);
    }
    ....
}
由于插件里的Activity没在主项目的Manifest里面注册，所以无法经历系统Framework层级的一系列初始化过程，最终导致获得的Activity实例并没有生命周期和无法使用res资源。
使用代理Activity能够解决这两个问题，但是有一些限制：
实际运行的Activity实例其实都是ProxyActivity，并不是真正想要启动的Activity；
ProxyActivity只能指定一种LaunchMode，所以插件里的Activity无法自定义LaunchMode；
不支持静态注册的BroadcastReceiver；
往往不是所有的APK都可作为插件被加载，插件项目需要依赖特定的框架，还有需要遵循一定的"开发规范"；

2）动态创建Activity模式
插件的Activity如何成为标准的Activity？
要使其成为标准的Activity，则需要在主项目里注册这些Activity，总不能把插件APK所有的Activity都事先注册到宿主项目里面吧
代理模式需要注册一个代理的ProxyActivity，那么能不能在主项目里 注册一个通用的Activity（比如TargetActivity）给插件里所有的Activity用呢？
在需要启动插件的某一个Activity（比如PlugActivity）的时候，动态创建一个TargetActivity，
新创建的TargetActivity会继承PlugActivity的所有共有行为，而这个TargetActivity的包名与类名刚好与我们事先注册的TargetActivity一致，
我们就能以标准的方式启动这个Activity。

1、如何运行时动态创建并编译一个Activity类？
动态创建类的工具有 dexmaker 和 asmdex，二者均能实现动态字节码操作，最大的区别是前者是创建DEX文件，而后者是创建CLASS文件。

2、自定义ClassLoader，重写loadClass
在Android，虚拟机加载类的时候，是通过ClassLoader的loadClass方法，而loadClass方法并不是final类型的，
这意味着我们可以创建自己的类去继承ClassLoader，以重载loadClass方法并改写类的加载逻辑，在需要加载PlugActivity的时候，
偷偷把其换成TargetActivity。
大致思路如下：

public class CJClassLoader extends ClassLoader{

@override
    public Class loadClass(String className){
      if(当前上下文插件不为空) {
        if( className 是 TargetActivity){

             找到当前实际要加载的原始PlugActivity，动态创建类（TargetActivity extends PlugActivity ）的dex文件

             return  从dex文件中加载的TargetActivity
        }else{
             return  使用对应的PluginClassLoader加载普通类
        }
     }else{

         return super.loadClass() //使用原来的类加载方法
     }
    }
}

存在的问题
动态类创建的方式，使得注册一个通用的Activity就能给多给Activity使用，对这种做法存在的问题也是明显的：
使用同一个注册的Activity，所以一些需要在Manifest注册的属性无法做到每个Activity都自定义配置；
插件中的权限，无法动态注册，插件需要的权限都得在宿主中注册，无法动态添加权限；
插件的Activity无法开启独立进程，因为这需要在Manifest里面注册；
动态字节码操作涉及到Hack开发，所以相比代理模式起来不稳定；



代理Activity模式与动态创建Activity模式的区别
1）简单地说，最大的不同是代理模式使用了一个 代理的Activity，而动态创建Activity模式使用了一个 通用的Activity。
2）代理Activity是一个标准的Android Activity组件，具有生命周期和上下文环境，但是它自身只是一个空壳，并没有承担什么业务逻辑
而插件Activity其实只是一个普通的Java对象，它没有上下文环境，但是却能正常执行业务逻辑的代码。代理Activity和不同的插件Activity配合起来，就能完成不同的业务逻辑了。
3）动态创建Activity模式，被动态创建出来的Activity类是有在主项目里面注册的，它是一个标准的Activity，它有自己的Context和生命周期，不需要代理的Activity。
架构和框架的区别
框架是软件，是系统或子系统的半成品，可复用，减少开发量。比如SSH框架：就是Sturts2 + springMVC + Hibernate
软件架构不是软件，而是关于软件如何设计的重要决策。比如MVC、MVP
框架落脚在“架”字上,可以理解成名词性的，是一个客观性的名词存在
而架构体现在“构”字上，理解成构造，是一个动词性的，是一系列动作发生的策略性体现。


==========================================架构=======================================
一、Android-CleanArchitecture
https://github.com/android10/Android-CleanArchitecture
http://www.open-open.com/lib/view/open1427081772418.html
http://www.open-open.com/lib/view/open1464916549918.html
https://github.com/dmilicic/Android-Clean-Boilerplate



android-architecture
Google推荐的架构方式
https://github.com/android/architecture-samples

Jekpack组件
https://github.com/android/architecture-components-samples

一、MVC
二、MVP
三、MVVM
四、MVPVM
https://msdn.microsoft.com/en-us/magazine/hh580734.aspx
五、Flux Android

http://developer.51cto.com/art/201508/489423.htm
https://github.com/TopJohn/Android-flux
https://github.com/androidflux/flux
https://gold.xitu.io/entry/576c3bcb6be3ff0063749103

AndroidFlux是Facebook的Flux架构的Android实现。Flux是Facebook在14年提出的一种Web前端架构，主要用来处理复杂的UI逻辑的一致性问题（当时是为了解决Web页面的消息通知问题）。经过实践之后发现，这种架构可以很好的应用于Android平台，相对于其他的MVC/MVP/MVVM等模式，拥有良好的文档和更具体的设计，比较适合于快速开发实现。
Flux模式最大的特点是单向的数据流，它的UI状态更新模式继承了MVC模式的设计思想。Flux并不是具体的框架，而是一套处理UI问题的模式，AndroidFlux同样不是具体的框架，你不需要导入或者集成任何新的代码就可以使用，而你需要做的事情是了解这套思想、遵循这种开发模式

下面看看Flux应用的各个部分
1、Dispatcher
一般一个应用中只有一个
是一个发布-订阅模式。Store会在这里注册自己的回调接口，Dispatcher会把Action分发到注册的Store，所以它会提供一些公有方法来注册监听和分发消息。
它仅仅是用来把Action发送到各个Store的一套简单的机制。每个Store都会把自己注册到这里，并提供自己的回调方法。
当ActionCreator给Dispatcher传递一个Action的时候，应用中所有的Store都会通过回调接口收到通知。
2、Stores&Model 
Store包含应用的状态(state)和逻辑(logic)
Store的特点是即维护了一组数据集合同时也维护了逻辑区域的状态，比如使用ImageStore来维护一组图片集合。
Store会把自己注册在Dispatcher上并提供一个回调接口，回调的参数是Action。在Store实现的回调方法内。会用一个switch语句根据Action类型来处理Action
这样就可以通过Dispatcher发送Action来更新Store的内部状态。当Store更新后，它会广播一个事件声明自己的状态已经改变了，然后View会读取这些变化并更新自己。

Model
这里的Model与MVC中的Model类似

3、View和Controller-View
Controller-View是一个比较复杂的概念，它是React框架中提出来的，这种View负责监听Store的状态并更新界面。而在Android应用中这变得非常简单，Controller-View就是Activity或者Fragment，每个Activity或Fragment都负责管理App的一块功能，负责监听Store并更新界面。
当View收到来自Store的更新事件时，它先会从Store的getter方法获取数据，然后调用自己的setStat()或者foreUpdate方法迫使界面重绘。 
通常一个Activity可以对应一个Store，但是当Activity包含几个Fragment，每个Fragment的功能比较独立时，也可以让每个Fragment分别对应自己的Store。

4、ActionCreator
负责创建Action，网络工作和异步工作都放在这里处理。
异步网络调用是被一个Actions Creator触发的。一个Network 适配器完成相应API的异步调用并且返回结果给Actions Creator。
最终Actions Creator分发带有返回数据的相应类型的Action。

5、Actions
Dispatcher会提供一个方法来分发事件到Store，并包含一些数据，这通常封装成一个Action
Action的创建一般被封装到一个有语境意义的Helper方法（ActionCreator），它会把Action传给Dispatcher。
响应用户事件时，ActionCreator还会给Action添加一个合适的类型，这样Store就知道如何处理这个Action了。
Action也可能来自其他的地方，比如Server或者缓存，这发生在数据初始化的时候。也有可能发生在服务器返回错误码或者服务器有数据更新的时候（比如推送消息）。



六 Redux Android
Redux是Flux的升级版


组件化开发
https://github.com/guiying712/AndroidModulePattern
https://github.com/qibin0506/Module2Module

插件化开发


==========================================单元测试=======================================
Mockito 框架




==========================================问题=======================================
在重构之前，我们的应用架构可以大致分为两层，应用层和 Library 层。

1、单一业务线

二、多条业务线
参考：沪江学习安卓端应用架构重构
http://ohmerhe.com/2016/12/24/hjstudy_android_refactor/

在重构之前，我们的应用架构可以大致分为两层，应用层和 Library 层。一些通用的 Library 主要由专门的部门的同事维护，各业务线也会有一些自己维护的依赖库，
也属于 Library 层。各业务线的主应用通过直接依赖的方式使用所需要 Library 提供的功能。
各个 Library 之间的依赖关系也是通过直接依赖的方式，由于没有一个明确的层级划分，随着 Library 数量的不断增加，他们之间的依赖关系变得越来越复杂。
这样的应用架构在一个相对小的团队中，可以很好的满足需求，将单独的功能模块和业务模块直接抽离成依赖库的方式去维护，可以降低模块之间的耦合性，
又能保证不同应用能够使用统一的公共服务（Library）。但当开发团队发展到一定规模，由于模块数据的增加，模块之间的依赖关系错综复杂，各业务线的业务需求千差万别，
这样简单的架构就会显得捉襟见肘了。下面的情况常常让人很头疼。

1、依赖库之间的强依赖。
其中一个最为突出的问题，就是库与库之间的强依赖关系。比如我用了一个库 A，A 使用 B 库来实现网络访问，但是在我的主项目中 C 来实现的网络请求。这种情况就会导致在主项目中同时依赖了两个网络请求库。

2、未知调用潜在风险大，版本升级成本高。
由于没有明确的接口约定，往往会发生修改某个看似不会被外面调用到的方法，却导致某个项目的崩溃。同时由于依赖关系的复杂性，当一个项目发生升级以后，需要花很大的精力去确定到具体影响到哪些项目。

3、模块方案发生变化，上层修改成本大。
由于是直接依赖的方式，在使用依赖库的时候，大家常常是直接使用库里面提供的接口，这样当某个功能需要切换实现方案的时候往往会导致上层代码的大量修改。

4、依赖库之间的版本冲突。
主项目依赖的某库的版本和依赖库里面所依赖的同样的库的版本发生冲突。

5、功能模块兼容性导致维护成本大。
在层次关系不够清晰、只有模块划分的时候，各业务线对公共模块需求有所差异，导致库的兼容代码越来越多，不易维护。甚至当某个模块为了满足某个业务线的特殊需求而影响到其他业务的正常使用。

重构方案：

整个架构的核心思想是面向接口编程和依赖注入使各个模块之间实现解耦，然后通过横向角色划分与纵向层级划分的方式约定各个模块之间的关系，再通过接口分层的方式，明确具体模块在不同层级上需要实现的功能
APPA  APPB  APPC






























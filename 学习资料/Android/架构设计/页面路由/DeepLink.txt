
一、Deep Linking技术
 <activity
           android:name=".activity.MainActivity"
           android:label="@string/app_name"
           android:launchMode="singleTask">

           <!-- URI Scheme方式 -->
           <intent-filter>
               <data android:scheme="wlb" />
               <action android:name="android.intent.action.VIEW" />
               <category android:name="android.intent.category.DEFAULT" />
               <category android:name="android.intent.category.BROWSABLE" />
           </intent-filter>
  </activity>

web页面跳转链接配置
只需简单地添加一个链接就可以实现从web页面唤起App。链接如下：
<a href="wlb://?click_id=IEGyekes7">open app with uri-scheme</a>

二、App Links
在Android M之前，点击一个链接会弹出一个对话框，询问用户使用哪个应用打开 － 包括浏览器应用。
谷歌在Android M 上实现了一个自动认证（auto-verify）机制，让开发者可以避开这个弹出框，使用户不必去选择一个列表，直接跳转到他们的App。

实现App Links需要保证满足一些列需求：
有一个注册了的域名
域名的SSL通道
具有上传JSON文件到域名的能力

1. 在app中激活App links
通过告诉安卓系统去验证app与域名之间的关系来激活App Links 吧。从此不再又任何的弹出框，因为我们已经在app中注册了该域名

<activity
  android:name="com.your.app.activity.ParseDeepLinkActivity"
  ...>

  <intent-filter android:autoVerify="true">
    <data android:scheme="http" android:host="yourdomain.com" />
    <data android:scheme="https" android:host="yourdomain.com" />
    ...
    <action android:name="android.intent.action.VIEW"/>
	<category android:name="android.intent.category.DEFAULT"/>
	<category android:name="android.intent.category.BROWSABLE"/>
  </intent-filter>
</activity>

这个配置告诉安卓去验证一个文件，这个文件地址是https://yourdomain.com/.well-known/statements.json。
如果存在这个文件，同时验证成功，那么用户点击该域名之下的链接时，就可以直接到app，弹出框就可以避免。否则app就没有成为默认选项，弹出框就会呈现给用户。

2.上传web-app关联文件（statements.json）
上传这个文件到服务器的/.well-known/statements.json。为了避免今后每个app链接请求都访问网络，安卓只会在app安装的时候检查这个文件。
确保你的web站点支持HTTPS请求。
https://yourdomain.com/.well-known/statements.json 能够访问则表示部署成功
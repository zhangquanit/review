特点：
1、消息通知机制、跨进程
2、运行在主线程中，onReceive方法不能执行耗时操作
3、在广播中启动Activity，需要给intent添加Intent.FLAG_ACTIVITY_NEW_TASK
Intent intent=new Intent(context,MainActivity.class);
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);
注意：在非Acitivity中(Receiver、Service)启动Activity，使用context.startAcitivity()需要给Intent意图添加此标志，否则会抛异常
android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?

1、注册广播的两种方式
1)静态注册：manifest.xml中注册：

        <receiver android:name=".TestReceiver" />

         //添加intent-filter，支持隐式调用
        <receiver android:name=".MyReceiver">
            <intent-filter>
                <action android:name="com.intent.action.test" />
            </intent-filter>
        </receiver>

2)动态注册
registerReceiver(receiver,filter); //注册广播
unregisterReceiver(sdcardStateReceiver); //注销广播


2、本地广播
只能在应用内发送、接收广播，不能在manifest.xml中注册，如果只能应用内发送和接收的广播，使用本地广播更高效
通过android.support.v4.content.LocalBroadcastManager来管理
LocalBroadcastReceiver mLocalReceiver=new LocalBroadcastReceiver();
LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(this);
localBroadcastManager.registerReceiver(mLocalReceiver,mIntentFilter);//注册广播
localBroadcastManager.sendBroadcast(mIntent); //发送广播
localBroadcastManager.unregisterReceiver(mLocalReceiver); //注销广播

3、普通广播与有序广播
http://blog.csdn.net/harvic880925/article/details/38710901

普通广播是指大家等级都是一样的，当广播到来时，都能一块接收到，并没有接收的先后顺序。由于是一同接收到的，所以一个接收者是没有办法阻止另一个接收者接收这个广播的。
sendBroadcast(intent);
有序广播是指接收是按一定的优先级顺序来接收的，优先级高的先收到，并可以对广播进行操作后，再传给下一个接收者，当然也可以不传，如果不传的话，后面的接收者就都收不到这个广播了。
sendOrderedBroadcast(intent, null);

android:priority设置优先级，范围0~1000
<receiver android:name=".SmsReceiver" >
   <intent-filter android:priority="100">
    <action android:name="android.provider.Telephony.SMS_RECEIVED" />
   </intent-filter>
</receiver>
BroadcastReceiver可以使用setResultXX函数来结果传给下一个BroadcastReceiver，通过getResultXX函数来取得上个BroadcastReceiver返回的结果，并可以abort系列函数来让系统丢弃该广播让，使用该广播不再传送到别的BroadcastReceiver。
相同android:priority属性的话，先注册的将先收到广播。



4、隐式广播和显示广播
1）发送显示广播
即在Intent中指定了BroadcastReceiver，就必须在manifest.xml中注册。
    intent = new Intent(this, TestReceiver.class);
    sendBroadcast(intent, null);

2）发送隐式广播
android8.0开始限制隐式广播，只保留了部分系统隐式广播。
如果自己应用中之前有隐式广播，建议使用JobScheduler代替。
    intent = new Intent("com.intent.action.permission"); //发送隐式广播
    sendBroadcast(intent);

如果是权限广播，则不受影响
    <permission
        android:name="com.review.receiver.permission"
        android:label="自定义广播权限"
        android:protectionLevel="signature" />
    <uses-permission android:name="com.review.receiver.permission" />

    <receiver
        android:name=".PermissionReceiver"
        android:permission="com.review.receiver.permission"
        >
        <intent-filter>
            <action android:name="com.intent.action.permission" />
            <category android:name="android.intent.category.DEFAULT" />
        </intent-filter>
    </receiver>

intent = new Intent("com.intent.action.permission");
sendBroadcast(intent, "com.review.receiver.permission"); //发送广播添加权限

如果是通过代码注册的广播，不管隐式还是显示都不受影响
    //发送隐私广播
    registerReceiver(new TestReceiver(), new IntentFilter("com.test.receiver.action")); //注册隐式广播
    sendBroadcast(new Intent("com.test.receiver.action"));

    //发送显示广播（TestReceiver必须在manifest中注册）
    intent=new Intent(this, TestReceiver.class);
    sendOrderedBroadcast(intent, null);
